
* First Things First
** General

Install packages if they aren't already present on the system.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

* Theme

[[http://kippura.org/zenburnpage/][Zenburn]] is pretty easy on the eyes.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :if (window-system)
    :ensure t
    :init
    (load-theme 'zenburn t))
#+END_SRC

Set cursor color to red (easier to see).

#+BEGIN_SRC emacs-lisp
(set-cursor-color "#ff0000")
#+END_SRC

Default region (selection) colors are hard for me to see.  Change them to more jarring.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'region nil
                      :background "WhiteSmoke"
                      :foreground "black")
#+END_SRC

* Miscellaneous

Don't blink the damn cursor!

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

* Packages

** company

Modular text completion framework

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** emmet-mode

Unofficial Emmet's support for emacs

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :init
    (progn
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
      (add-hook 'web-mode-hook  'emmet-mode)))
#+END_SRC

** expand-region

Increase selected region by semantic units.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** flyspell

[[https://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Flyspell]] enables on-the-fly spell checking in Emacs by the means of a minor mode.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :init
    (progn
      (setq flyspell-issue-message-flag nil)
      (dolist (hook '(text-mode-hook))
        (add-hook hook (lambda () (flyspell-mode 1))))
      (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
        (add-hook hook (lambda () (flyspell-mode -1))))
      (dolist (hook '(prog-mode-hook))
        (add-hook hook (lambda () (flyspell-prog-mode))))))
#+END_SRC

[[http://blog.binchen.org/posts/effective-spell-check-in-emacs.html][Effective spell check in Emacs]]

#+BEGIN_SRC emacs-lisp
  ;; {{ flyspell setup for web-mode
  (defun web-mode-flyspell-verify ()
    (let* ((f (get-text-property (- (point) 1) 'face))
           rlt)
      (cond
       ;; Check the words with these font faces, possibly.
       ;; this *blacklist* will be tweaked in next condition
       ((not (memq f '(web-mode-html-attr-value-face
                       web-mode-html-tag-face
                       web-mode-html-attr-name-face
                       web-mode-constant-face
                       web-mode-doctype-face
                       web-mode-keyword-face
                       web-mode-comment-face ;; focus on get html label right
                       web-mode-function-name-face
                       web-mode-variable-name-face
                       web-mode-css-property-name-face
                       web-mode-css-selector-face
                       web-mode-css-color-face
                       web-mode-type-face
                       web-mode-block-control-face)))
        (setq rlt t))
       ;; check attribute value under certain conditions
       ((memq f '(web-mode-html-attr-value-face))
        (save-excursion
          (search-backward-regexp "=['\"]" (line-beginning-position) t)
          (backward-char)
          (setq rlt (string-match "^\\(value\\|class\\|ng[A-Za-z0-9-]*\\)$"
                                  (thing-at-point 'symbol)))))
       ;; finalize the blacklist
       (t
        (setq rlt nil)))
      rlt))
  (put 'web-mode 'flyspell-mode-predicate 'web-mode-flyspell-verify)
  ;; }}
#+END_SRC

** git-gutter-fringe

Fringe version of git-gutter.el

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :ensure fringe-helper
    :config
    (progn
      (set-face-foreground 'git-gutter-fr:modified "yellow")
      (set-face-foreground 'git-gutter-fr:added    "green")
      (set-face-foreground 'git-gutter-fr:deleted  "red")

      (global-git-gutter-mode)))
#+END_SRC

** multiple-cursors

Multiple cursors for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init
    (progn
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
      (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)))
#+END_SRC

** web-mode

~web-mode.el~ is an autonomous emacs major-mode for editing web templates.
HTML documents can embed parts (CSS / JavaScript) and blocks (client / server side). 

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC
